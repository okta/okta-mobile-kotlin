buildscript {
    apply from: 'versions.gradle'
    addRepos(repositories)
    forceVersions(configurations)

    dependencies {
        classpath deps.android_gradle_plugin
        classpath deps.dokka_gradle_plugin
        classpath deps.gradle_maven_publish
        classpath deps.kotlin.binary_compatibility_plugin
        classpath deps.kotlin.plugin
        classpath deps.kotlin.serialization_plugin
        classpath deps.navigation.safe_args_plugin
        classpath deps.spotless
    }
}

plugins {
    id 'com.google.devtools.ksp' version '1.9.10-1.0.13' apply false
}

apply plugin: 'org.jetbrains.dokka'

allprojects {
    group = project.property('GROUP')
    version = project.property('VERSION_NAME')

    addRepos(repositories)
    forceVersions(configurations)
    configurePublishing(it)
    configureSpotless(it)
    configureDokka(it)
}

def configurePublishing(Project project) {
    project.plugins.withId('com.vanniktech.maven.publish.base') {
        project.apply plugin: 'signing'

        project.mavenPublishing {
            publishToMavenCentral("DEFAULT")
            pomFromGradleProperties()
        }

        if (project.hasProperty('signWithGpgCommand')) {
            project.afterEvaluate {
                project.signing {
                    useGpgCmd()
                    sign project.publishing.publications
                }
            }
        }

        if (project.hasProperty('signAllPublications')) {
            project.mavenPublishing {
                signAllPublications()
            }
        }

        if (project.plugins.hasPlugin('com.android.library')) {
            project.mavenPublishing.configure(new com.vanniktech.maven.publish.AndroidSingleVariantLibrary("release"))
        }
    }
}

def configureDokka(Project p) {
    p.tasks.withType(org.jetbrains.dokka.gradle.DokkaTaskPartial).configureEach {
        dokkaSourceSets {
            configureEach {
                jdkVersion.set(11)
                suppressInheritedMembers.set(true)

                perPackageOption {
                    matchingRegex.set(".*\\.internal.*")
                    suppress.set(true)
                }

                externalDocumentationLink {
                    url.set(new URL("https://square.github.io/okhttp/4.x/"))
                    packageListUrl.set(new URL("https://square.github.io/okhttp/4.x/okhttp/package-list"))
                }
                externalDocumentationLink {
                    url.set(new URL("https://kotlin.github.io/kotlinx.serialization/"))
                    packageListUrl.set(new URL("https://kotlin.github.io/kotlinx.serialization/package-list"))
                }
            }
        }
    }

    p.plugins.withId('org.jetbrains.dokka') {
        p.dependencies {
            dokkaPlugin(project(':suppress-internal-dokka-plugin'))
        }
    }
}

tasks.dokkaHtmlMultiModule.configure {
    outputDirectory.set(file("${rootDir}/docs"))
}
